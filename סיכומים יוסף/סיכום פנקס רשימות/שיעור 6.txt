שיעור 6 

קונסטרקטור ארראי 
אררי רגיל 
ניו פונקציה
. פייל פונקציה
פוש 
פיינד 
מתודה 
פונקציה בתוך פיינד
פפיינד נדאקס 
 פונקצית פילטר 
כמובן שאפשר ינקלוד בינהם 
פור איצ 
מאפ 
 האש מאפ 
קופי  
ספריד אופרטור
גייסון פארס גייסון סטרינגיפיי 
רידיוס
הנה טבלה מסודרת שמסבירה מה כל אחד מהפריטים עושה ב-JavaScript:

| שם הפונקציה / מושג | תיאור | דוגמה |
|---------------------|--------|--------|
| **קונסטרקטור ארראי** | יוצר מערך חדש עם מספר איברים מסוים או עם איברים שהוזנו. | `let arr = new Array(3); // יוצר מערך עם 3 תאים ריקים` |
| **אררי רגיל** | יצירת מערך באמצעות סוגריים מרובעים. | `let arr = [1, 2, 3];` |
| **ניו פונקציה** | יצירת פונקציה באמצעות הבנאי `Function`. | `let myFunc = new Function('a', 'b', 'return a + b');` |
| **פייל פונקציה (file function)** | מונח לא ברור, האם הכוונה לפונקציות המשמשות לקריאת קבצים (`fs.readFile` למשל)? | `const fs = require('fs'); fs.readFile('file.txt', 'utf8', (err, data) => { console.log(data); });` |
| **פוש (push)** | מוסיף איבר (או יותר) לסוף המערך. | `let arr = [1, 2]; arr.push(3); // arr: [1, 2, 3]` |
| **פיינד (find)** | מחפש ומחזיר את האיבר הראשון שעונה לתנאי מסוים. | `let num = [5, 12, 8].find(n => n > 10); // מחזיר 12` |
| **מתודה (Method)** | פונקציה שמוגדרת בתוך אובייקט. | `let obj = { sayHello() { return "Hello"; } }; obj.sayHello();` |
| **פונקציה בתוך פיינד** | פונקציה שמועברת כפרמטר לפעולת `find` כדי להגדיר את התנאי לחיפוש. | `let arr = [10, 20, 30]; let res = arr.find(num => num > 15); // 20` |
| **פיינד אינדקס (findIndex)** | מחפש את המיקום (האינדקס) של האיבר הראשון שעומד בתנאי. | `let arr = [10, 20, 30]; let index = arr.findIndex(num => num > 15); // 1` |
| **פונקצית פילטר (filter)** | מסננת את המערך ומחזירה רק את האיברים שעומדים בתנאי. | `let res = [5, 12, 8].filter(n => n > 7); // [12, 8]` |
| **כולל (includes)** | בודק האם איבר מסוים נמצא במערך. | `let arr = [1, 2, 3]; arr.includes(2); // true` |
| **פור איצ (forEach)** | עובר על כל איבר במערך ומבצע עליו פעולה. | `[1, 2, 3].forEach(n => console.log(n * 2));` |
| **מאפ (map)** | יוצר מערך חדש על בסיס הקיים, על ידי שינוי כל איבר במערך המקורי. | `let res = [1, 2, 3].map(n => n * 2); // [2, 4, 6]` |
| **האשת מאפ (Map)** | מבנה נתונים שמחזיק זוגות של מפתח-ערך. | `let map = new Map(); map.set('key', 'value'); console.log(map.get('key')); // 'value'` |
| **קופי (copy)** | מונח לא ברור – האם הכוונה להעתקת מערך? אפשר להשתמש ב-`slice` או `spread`. | `let arr = [1, 2, 3]; let copy = [...arr];` |
| **ספריד אופרטור (spread operator)** | מפשט מערכים ואובייקטים. | `let arr = [1, 2, 3]; let newArr = [...arr, 4]; // [1, 2, 3, 4]` |
| **JSON.parse** | ממיר מחרוזת JSON לאובייקט. | `let obj = JSON.parse('{"name":"John"}'); console.log(obj.name); // John` |
| **JSON.stringify** | ממיר אובייקט למחרוזת JSON. | `let str = JSON.stringify({name: "John"}); console.log(str); // '{"name":"John"}'` |
| **רדיוס (reduce)** | מבצע חישוב מצטבר על מערך ומחזיר ערך יחיד. | `let sum = [1, 2, 3].reduce((acc, curr) => acc + curr, 0); // 6` |

אם יש צורך בהסבר מפורט יותר על אחד מהם, אני כאן! 🚀